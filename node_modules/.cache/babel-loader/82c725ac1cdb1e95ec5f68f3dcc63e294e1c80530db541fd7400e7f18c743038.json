{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swapn\\\\Desktop\\\\ReactCloneProjects\\\\gmail_clone\\\\src\\\\LeftRight\\\\EmailList.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import EmailListSettings from \"./EmailListSettings\";\n// import EmailType from \"./EmailTyps\";\n// import EmailBody from \"./EmailBody\";\n\n// const EmailList = () => {\n//   return (\n//     <div className=\"emaillist\">\n//       <EmailListSettings></EmailListSettings>\n//       <EmailType></EmailType>\n\n//       <EmailBody\n//         name=\"Pranay Dhoni\"\n//         subject=\"Resume\"\n//         message=\"This is Checking paragraf\"\n//         time=\"03:20\"\n//       ></EmailBody>\n//     </div>\n//   );\n// };\n\n// export default EmailList;\n\nimport React, { useState, useEffect } from \"react\";\nimport EmailListSettings from \"./EmailListSettings\";\nimport EmailType from \"./EmailTyps\";\nimport EmailBody from \"./EmailBody\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailList = () => {\n  _s();\n  const [emails, setEmails] = useState([]);\n  useEffect(() => {\n    // Firebase Realtime Database URL\n    const firebaseURL = \"YOUR_FIREBASE_DATABASE_URL\"; // Replace with your Firebase Realtime Database URL\n    const emailPath = \"emails\"; // Replace with the actual path in your database\n\n    fetch(`${firebaseURL}/${emailPath}.json`).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      if (data) {\n        // Convert Firebase data to an array (if it's not already)\n        const emailArray = Object.values(data);\n        setEmails(emailArray);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching data from Firebase:\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emaillist\",\n    children: emails.map((email, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", email.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Subject: \", email.subject]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Message: \", email.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", email.time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailList, \"Pz1emXvf1o2teMcG4tW42BuWti4=\");\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useState","useEffect","EmailListSettings","EmailType","EmailBody","jsxDEV","_jsxDEV","EmailList","_s","emails","setEmails","firebaseURL","emailPath","fetch","then","response","ok","Error","json","data","emailArray","Object","values","catch","error","console","className","children","map","email","index","name","fileName","_jsxFileName","lineNumber","columnNumber","subject","message","time","_c","$RefreshReg$"],"sources":["C:/Users/swapn/Desktop/ReactCloneProjects/gmail_clone/src/LeftRight/EmailList.js"],"sourcesContent":["// import React from \"react\";\r\n// import EmailListSettings from \"./EmailListSettings\";\r\n// import EmailType from \"./EmailTyps\";\r\n// import EmailBody from \"./EmailBody\";\r\n\r\n// const EmailList = () => {\r\n//   return (\r\n//     <div className=\"emaillist\">\r\n//       <EmailListSettings></EmailListSettings>\r\n//       <EmailType></EmailType>\r\n\r\n//       <EmailBody\r\n//         name=\"Pranay Dhoni\"\r\n//         subject=\"Resume\"\r\n//         message=\"This is Checking paragraf\"\r\n//         time=\"03:20\"\r\n//       ></EmailBody>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmailList;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport EmailListSettings from \"./EmailListSettings\";\r\nimport EmailType from \"./EmailTyps\";\r\nimport EmailBody from \"./EmailBody\";\r\n\r\nconst EmailList = () => {\r\n  const [emails, setEmails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Firebase Realtime Database URL\r\n    const firebaseURL = \"YOUR_FIREBASE_DATABASE_URL\"; // Replace with your Firebase Realtime Database URL\r\n    const emailPath = \"emails\"; // Replace with the actual path in your database\r\n\r\n    fetch(`${firebaseURL}/${emailPath}.json`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data) {\r\n          // Convert Firebase data to an array (if it's not already)\r\n          const emailArray = Object.values(data);\r\n          setEmails(emailArray);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching data from Firebase:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"emaillist\">\r\n      {/* Render your email list using the 'emails' state */}\r\n      {emails.map((email, index) => (\r\n        <div key={index}>\r\n          {/* Render email data here */}\r\n          <p>Name: {email.name}</p>\r\n          <p>Subject: {email.subject}</p>\r\n          <p>Message: {email.message}</p>\r\n          <p>Time: {email.time}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,WAAW,GAAG,4BAA4B,CAAC,CAAC;IAClD,MAAMC,SAAS,GAAG,QAAQ,CAAC,CAAC;;IAE5BC,KAAK,CAAE,GAAEF,WAAY,IAAGC,SAAU,OAAM,CAAC,CACtCE,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACd,IAAIA,IAAI,EAAE;QACR;QACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAACH,IAAI,CAAC;QACtCT,SAAS,CAACU,UAAU,CAAC;MACvB;IACF,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA;IAAKoB,SAAS,EAAC,WAAW;IAAAC,QAAA,EAEvBlB,MAAM,CAACmB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBxB,OAAA;MAAAqB,QAAA,gBAEErB,OAAA;QAAAqB,QAAA,GAAG,QAAM,EAACE,KAAK,CAACE,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB7B,OAAA;QAAAqB,QAAA,GAAG,WAAS,EAACE,KAAK,CAACO,OAAO;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/B7B,OAAA;QAAAqB,QAAA,GAAG,WAAS,EAACE,KAAK,CAACQ,OAAO;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/B7B,OAAA;QAAAqB,QAAA,GAAG,QAAM,EAACE,KAAK,CAACS,IAAI;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GALjBL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAzCID,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}