{"ast":null,"code":"// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n\n// let logoutTimer;\n\n// const AuthContext = React.createContext({\n//   token: \"\",\n//   isLoggedIn: false,\n//   login: () => {},\n//   logout: () => {},\n// });\n\n// const calculateRemainingTime = (expirationTime) => {\n//   const currentTime = new Date().getTime();\n//   const adjExpirationTime = new Date(expirationTime).getTime();\n//   const remainingDuration = adjExpirationTime - currentTime;\n//   return remainingDuration;\n// };\n\n// const retriveStoredToken = () => {\n//   const storedToken = localStorage.getItem(\"token\");\n//   const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n\n//   const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n//   if (remainingTime <= 3600) {\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"expirationTime\");\n//     return null;\n//   }\n//   return {\n//     token: storedToken,\n//     duration: remainingTime,\n//   };\n// };\n\n// export const AuthContextProvider = (props) => {\n//   const tokenData = retriveStoredToken();\n\n//   let initialToken;\n//   if (tokenData) {\n//     initialToken = tokenData.token;\n//   }\n\n//   const [token, setToken] = useState(initialToken);\n\n//   const userIsLoggedIn = !!token;\n\n//   const history = useHistory();\n\n//   const logoutHandler = useCallback(() => {\n//     setToken(null);\n//     localStorage.removeItem(\"token\");\n//     localStorage.removeItem(\"expirationTime\");\n\n//     if (logoutTimer) {\n//       clearTimeout(logoutTimer);\n//     }\n//     history.push(\"/auth\");\n//   }, [history]);\n\n//   const loginHandler = (tokenId, expirationTime) => {\n//     setToken(tokenId);\n\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expirationTime\", expirationTime);\n\n//     const remainingTime = calculateRemainingTime(expirationTime);\n//     logoutTimer = setTimeout(logoutHandler, remainingTime);\n//   };\n\n//   useEffect(() => {\n//     if (tokenData) {\n//       logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n//     }\n//   }, [tokenData, logoutHandler]);\n\n//   const contextValue = {\n//     token: token,\n//     isLoggedIn: userIsLoggedIn,\n//     login: loginHandler,\n//     logout: logoutHandler,\n//   };\n\n//   return (\n//     <AuthContext.Provider value={contextValue}>\n//       {props.children}\n//     </AuthContext.Provider>\n//   );\n// };\n// export default AuthContext;","map":{"version":3,"names":[],"sources":["C:/Users/swapn/Desktop/ReactCloneProjects/gmail_clone/src/Login/auth-context.js"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\n// let logoutTimer;\r\n\r\n// const AuthContext = React.createContext({\r\n//   token: \"\",\r\n//   isLoggedIn: false,\r\n//   login: () => {},\r\n//   logout: () => {},\r\n// });\r\n\r\n// const calculateRemainingTime = (expirationTime) => {\r\n//   const currentTime = new Date().getTime();\r\n//   const adjExpirationTime = new Date(expirationTime).getTime();\r\n//   const remainingDuration = adjExpirationTime - currentTime;\r\n//   return remainingDuration;\r\n// };\r\n\r\n// const retriveStoredToken = () => {\r\n//   const storedToken = localStorage.getItem(\"token\");\r\n//   const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n//   const remainingTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n//   if (remainingTime <= 3600) {\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"expirationTime\");\r\n//     return null;\r\n//   }\r\n//   return {\r\n//     token: storedToken,\r\n//     duration: remainingTime,\r\n//   };\r\n// };\r\n\r\n// export const AuthContextProvider = (props) => {\r\n//   const tokenData = retriveStoredToken();\r\n\r\n//   let initialToken;\r\n//   if (tokenData) {\r\n//     initialToken = tokenData.token;\r\n//   }\r\n\r\n//   const [token, setToken] = useState(initialToken);\r\n\r\n//   const userIsLoggedIn = !!token;\r\n\r\n//   const history = useHistory();\r\n\r\n//   const logoutHandler = useCallback(() => {\r\n//     setToken(null);\r\n//     localStorage.removeItem(\"token\");\r\n//     localStorage.removeItem(\"expirationTime\");\r\n\r\n//     if (logoutTimer) {\r\n//       clearTimeout(logoutTimer);\r\n//     }\r\n//     history.push(\"/auth\");\r\n//   }, [history]);\r\n\r\n//   const loginHandler = (tokenId, expirationTime) => {\r\n//     setToken(tokenId);\r\n\r\n//     localStorage.setItem(\"token\", token);\r\n//     localStorage.setItem(\"expirationTime\", expirationTime);\r\n\r\n//     const remainingTime = calculateRemainingTime(expirationTime);\r\n//     logoutTimer = setTimeout(logoutHandler, remainingTime);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (tokenData) {\r\n//       logoutTimer = setTimeout(logoutHandler, tokenData.duration);\r\n//     }\r\n//   }, [tokenData, logoutHandler]);\r\n\r\n//   const contextValue = {\r\n//     token: token,\r\n//     isLoggedIn: userIsLoggedIn,\r\n//     login: loginHandler,\r\n//     logout: logoutHandler,\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={contextValue}>\r\n//       {props.children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n// export default AuthContext;\r\n"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}