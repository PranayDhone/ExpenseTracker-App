{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swapn\\\\Desktop\\\\ReactCloneProjects\\\\gmail_clone\\\\src\\\\Login\\\\AuthForm.js\",\n  _s = $RefreshSig$();\n// import { useState, useRef, useContext } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n// // import AuthContext from \"./auth-context\"; ///\n// import classes from \"./AuthForm.module.css\";\n// import { useDispatch } from \"react-redux\";\n\n// const AuthForm = () => {\n//   const history = useHistory();\n//   const emailInputRef = useRef();\n//   const passwordInputRef = useRef();\n\n//   // const authCtx = useContext(AuthContext);\n//   // const auth=useDispatch()\n\n//   const [isLogin, setIsLogin] = useState(true);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const switchAuthModeHandler = () => {\n//     setIsLogin((prevState) => !prevState);\n//   };\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n\n//     const enteredEmail = emailInputRef.current.value;\n//     const enteredPassword = passwordInputRef.current.value;\n\n//     setIsLoading(true);\n//     let url;\n//     if (isLogin) {\n//       url =\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n//     } else {\n//       url =\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n//     }\n//     fetch(url, {\n//       method: \"POST\",\n//       body: JSON.stringify({\n//         email: enteredEmail,\n//         password: enteredPassword,\n//         returnSecureToken: true,\n//       }),\n\n//       headers: {\n//         \"content-type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         setIsLoading(false);\n//         if (res.ok) {\n//           return res.json();\n//         } else {\n//           return res.json().then((data) => {\n//             let errorMessage = \"Authentication #Failed\";\n//             // if (data && data.error && data.error.message) {\n//             //   errorMessage = data.error.message;\n//             // }\n\n//             throw new Error(errorMessage);\n//           });\n//         }\n//       })\n//       .then((data) => {\n//         const expirationTime = new Date(\n//           new Date().getTime() + +data.expiresIn * 1000\n//         );\n//         // authCtx.login(data.idToken, expirationTime.toISOString());\n\n//         //Navigate.replace(\"/\");\n//         history.push(\"/\");\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   };\n\n//   return (\n//     <section className={classes.auth}>\n//       <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n//       <form onSubmit={submitHandler}>\n//         <div className={classes.control}>\n//           <label htmlFor=\"email\">Your Email</label>\n//           <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n//         </div>\n//         <div className={classes.control}>\n//           <label htmlFor=\"password\">Your Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             required\n//             ref={passwordInputRef}\n//           />\n//         </div>\n\n//         <div className={classes.actions}>\n//           {!isLoading && (\n//             <button>{isLogin ? \"Login\" : \"Create An Account\"}</button>\n//           )}\n//           {isLoading && <p>sending request...</p>}\n//           <button\n//             type=\"button\"\n//             className={classes.toggle}\n//             onClick={switchAuthModeHandler}\n//           >\n//             {isLogin ? \"Create new account\" : \"Login with existing account\"}\n//           </button>\n//         </div>\n//       </form>\n//     </section>\n//   );\n// };\n\n// export default AuthForm;\n\nimport React, { useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { UserActions } from \"../store/UserSlice\"; // Assuming this is your UserSlice\nimport classes from \"./AuthForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthForm = () => {\n  _s();\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n\n    ///**** */\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    setIsLoading(true);\n    let url;\n    if (isLogin) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n    } else {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n    }\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      setIsLoading(false);\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = \"Authentication Failed\";\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      const expirationTime = new Date(new Date().getTime() + +data.expiresIn * 1000);\n\n      // Dispatch the signIn action with the user data\n      dispatch(UserActions.signIn(data));\n      history.push(\"/\");\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? \"Login\" : \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [!isLoading && /*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? \"Login\" : \"Create An Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"sending request...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? \"Create new account\" : \"Login with existing account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthForm, \"DAe8dx7dHDxl3gChUX2wmrD8KYY=\", false, function () {\n  return [useHistory, useDispatch];\n});\n_c = AuthForm;\nexport default AuthForm;\nvar _c;\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"names":["React","useState","useRef","useHistory","useDispatch","UserActions","classes","jsxDEV","_jsxDEV","AuthForm","_s","history","emailInputRef","passwordInputRef","isLogin","setIsLogin","isLoading","setIsLoading","dispatch","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorMessage","Error","expirationTime","Date","getTime","expiresIn","signIn","push","catch","err","alert","message","className","auth","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","control","htmlFor","type","id","required","ref","actions","toggle","onClick","_c","$RefreshReg$"],"sources":["C:/Users/swapn/Desktop/ReactCloneProjects/gmail_clone/src/Login/AuthForm.js"],"sourcesContent":["// import { useState, useRef, useContext } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// // import AuthContext from \"./auth-context\"; ///\r\n// import classes from \"./AuthForm.module.css\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\n// const AuthForm = () => {\r\n//   const history = useHistory();\r\n//   const emailInputRef = useRef();\r\n//   const passwordInputRef = useRef();\r\n\r\n//   // const authCtx = useContext(AuthContext);\r\n//   // const auth=useDispatch()\r\n\r\n//   const [isLogin, setIsLogin] = useState(true);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const switchAuthModeHandler = () => {\r\n//     setIsLogin((prevState) => !prevState);\r\n//   };\r\n//   const submitHandler = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const enteredEmail = emailInputRef.current.value;\r\n//     const enteredPassword = passwordInputRef.current.value;\r\n\r\n//     setIsLoading(true);\r\n//     let url;\r\n//     if (isLogin) {\r\n//       url =\r\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n//     } else {\r\n//       url =\r\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n//     }\r\n//     fetch(url, {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify({\r\n//         email: enteredEmail,\r\n//         password: enteredPassword,\r\n//         returnSecureToken: true,\r\n//       }),\r\n\r\n//       headers: {\r\n//         \"content-type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         setIsLoading(false);\r\n//         if (res.ok) {\r\n//           return res.json();\r\n//         } else {\r\n//           return res.json().then((data) => {\r\n//             let errorMessage = \"Authentication #Failed\";\r\n//             // if (data && data.error && data.error.message) {\r\n//             //   errorMessage = data.error.message;\r\n//             // }\r\n\r\n//             throw new Error(errorMessage);\r\n//           });\r\n//         }\r\n//       })\r\n//       .then((data) => {\r\n//         const expirationTime = new Date(\r\n//           new Date().getTime() + +data.expiresIn * 1000\r\n//         );\r\n//         // authCtx.login(data.idToken, expirationTime.toISOString());\r\n\r\n//         //Navigate.replace(\"/\");\r\n//         history.push(\"/\");\r\n//       })\r\n//       .catch((err) => {\r\n//         alert(err.message);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section className={classes.auth}>\r\n//       <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n//       <form onSubmit={submitHandler}>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor=\"email\">Your Email</label>\r\n//           <input type=\"email\" id=\"email\" required ref={emailInputRef} />\r\n//         </div>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor=\"password\">Your Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             required\r\n//             ref={passwordInputRef}\r\n//           />\r\n//         </div>\r\n\r\n//         <div className={classes.actions}>\r\n//           {!isLoading && (\r\n//             <button>{isLogin ? \"Login\" : \"Create An Account\"}</button>\r\n//           )}\r\n//           {isLoading && <p>sending request...</p>}\r\n//           <button\r\n//             type=\"button\"\r\n//             className={classes.toggle}\r\n//             onClick={switchAuthModeHandler}\r\n//           >\r\n//             {isLogin ? \"Create new account\" : \"Login with existing account\"}\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default AuthForm;\r\n\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UserActions } from \"../store/UserSlice\"; // Assuming this is your UserSlice\r\nimport classes from \"./AuthForm.module.css\";\r\n\r\nconst AuthForm = () => {\r\n  const history = useHistory();\r\n  const emailInputRef = useRef();\r\n  const passwordInputRef = useRef();\r\n  \r\n\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    ///**** */\r\n\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredPassword = passwordInputRef.current.value;\r\n\r\n    setIsLoading(true);\r\n    let url;\r\n    if (isLogin) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n    } else {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n    }\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: enteredEmail,\r\n        password: enteredPassword,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setIsLoading(false);\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          return res.json().then((data) => {\r\n            let errorMessage = \"Authentication Failed\";\r\n            throw new Error(errorMessage);\r\n          });\r\n        }\r\n      })\r\n      .then((data) => {\r\n        const expirationTime = new Date(\r\n          new Date().getTime() + +data.expiresIn * 1000\r\n        );\r\n\r\n        // Dispatch the signIn action with the user data\r\n        dispatch(UserActions.signIn(data));\r\n\r\n        history.push(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        alert(err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section className={classes.auth}>\r\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n      <form onSubmit={submitHandler}>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"email\">Your Email</label>\r\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\r\n        </div>\r\n        <div className={classes.control}>\r\n          <label htmlFor=\"password\">Your Password</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            required\r\n            ref={passwordInputRef}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.actions}>\r\n          {!isLoading && (\r\n            <button>{isLogin ? \"Login\" : \"Create An Account\"}</button>\r\n          )}\r\n          {isLoading && <p>sending request...</p>}\r\n          <button\r\n            type=\"button\"\r\n            className={classes.toggle}\r\n            onClick={switchAuthModeHandler}\r\n          >\r\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}