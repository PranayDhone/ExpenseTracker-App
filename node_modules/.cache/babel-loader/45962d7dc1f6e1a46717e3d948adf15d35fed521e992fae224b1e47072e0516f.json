{"ast":null,"code":"// import { useState, useRef, useContext } from \"react\";\n// import { useHistory } from \"react-router-dom\";\n// // import AuthContext from \"./auth-context\"; ///\n// import classes from \"./AuthForm.module.css\";\n// import { useDispatch } from \"react-redux\";\n\n// const AuthForm = () => {\n//   const history = useHistory();\n//   const emailInputRef = useRef();\n//   const passwordInputRef = useRef();\n\n//   // const authCtx = useContext(AuthContext);\n//   // const auth=useDispatch()\n\n//   const [isLogin, setIsLogin] = useState(true);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const switchAuthModeHandler = () => {\n//     setIsLogin((prevState) => !prevState);\n//   };\n//   const submitHandler = (event) => {\n//     event.preventDefault();\n\n//     const enteredEmail = emailInputRef.current.value;\n//     const enteredPassword = passwordInputRef.current.value;\n\n//     setIsLoading(true);\n//     let url;\n//     if (isLogin) {\n//       url =\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n//     } else {\n//       url =\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\n//     }\n//     fetch(url, {\n//       method: \"POST\",\n//       body: JSON.stringify({\n//         email: enteredEmail,\n//         password: enteredPassword,\n//         returnSecureToken: true,\n//       }),\n\n//       headers: {\n//         \"content-type\": \"application/json\",\n//       },\n//     })\n//       .then((res) => {\n//         setIsLoading(false);\n//         if (res.ok) {\n//           return res.json();\n//         } else {\n//           return res.json().then((data) => {\n//             let errorMessage = \"Authentication #Failed\";\n//             // if (data && data.error && data.error.message) {\n//             //   errorMessage = data.error.message;\n//             // }\n\n//             throw new Error(errorMessage);\n//           });\n//         }\n//       })\n//       .then((data) => {\n//         const expirationTime = new Date(\n//           new Date().getTime() + +data.expiresIn * 1000\n//         );\n//         // authCtx.login(data.idToken, expirationTime.toISOString());\n\n//         //Navigate.replace(\"/\");\n//         history.push(\"/\");\n//       })\n//       .catch((err) => {\n//         alert(err.message);\n//       });\n//   };\n\n//   return (\n//     <section className={classes.auth}>\n//       <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n//       <form onSubmit={submitHandler}>\n//         <div className={classes.control}>\n//           <label htmlFor=\"email\">Your Email</label>\n//           <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n//         </div>\n//         <div className={classes.control}>\n//           <label htmlFor=\"password\">Your Password</label>\n//           <input\n//             type=\"password\"\n//             id=\"password\"\n//             required\n//             ref={passwordInputRef}\n//           />\n//         </div>\n\n//         <div className={classes.actions}>\n//           {!isLoading && (\n//             <button>{isLogin ? \"Login\" : \"Create An Account\"}</button>\n//           )}\n//           {isLoading && <p>sending request...</p>}\n//           <button\n//             type=\"button\"\n//             className={classes.toggle}\n//             onClick={switchAuthModeHandler}\n//           >\n//             {isLogin ? \"Create new account\" : \"Login with existing account\"}\n//           </button>\n//         </div>\n//       </form>\n//     </section>\n//   );\n// };\n\n// export default AuthForm;","map":{"version":3,"names":[],"sources":["C:/Users/swapn/Desktop/ReactCloneProjects/gmail_clone/src/Login/AuthForm.js"],"sourcesContent":["// import { useState, useRef, useContext } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// // import AuthContext from \"./auth-context\"; ///\r\n// import classes from \"./AuthForm.module.css\";\r\n// import { useDispatch } from \"react-redux\";\r\n\r\n// const AuthForm = () => {\r\n//   const history = useHistory();\r\n//   const emailInputRef = useRef();\r\n//   const passwordInputRef = useRef();\r\n\r\n//   // const authCtx = useContext(AuthContext);\r\n//   // const auth=useDispatch()\r\n\r\n//   const [isLogin, setIsLogin] = useState(true);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const switchAuthModeHandler = () => {\r\n//     setIsLogin((prevState) => !prevState);\r\n//   };\r\n//   const submitHandler = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const enteredEmail = emailInputRef.current.value;\r\n//     const enteredPassword = passwordInputRef.current.value;\r\n\r\n//     setIsLoading(true);\r\n//     let url;\r\n//     if (isLogin) {\r\n//       url =\r\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n//     } else {\r\n//       url =\r\n//         \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBUw8bDVFG0Z4YlqH91ivpNrCUmCMnSV_o\";\r\n//     }\r\n//     fetch(url, {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify({\r\n//         email: enteredEmail,\r\n//         password: enteredPassword,\r\n//         returnSecureToken: true,\r\n//       }),\r\n\r\n//       headers: {\r\n//         \"content-type\": \"application/json\",\r\n//       },\r\n//     })\r\n//       .then((res) => {\r\n//         setIsLoading(false);\r\n//         if (res.ok) {\r\n//           return res.json();\r\n//         } else {\r\n//           return res.json().then((data) => {\r\n//             let errorMessage = \"Authentication #Failed\";\r\n//             // if (data && data.error && data.error.message) {\r\n//             //   errorMessage = data.error.message;\r\n//             // }\r\n\r\n//             throw new Error(errorMessage);\r\n//           });\r\n//         }\r\n//       })\r\n//       .then((data) => {\r\n//         const expirationTime = new Date(\r\n//           new Date().getTime() + +data.expiresIn * 1000\r\n//         );\r\n//         // authCtx.login(data.idToken, expirationTime.toISOString());\r\n\r\n//         //Navigate.replace(\"/\");\r\n//         history.push(\"/\");\r\n//       })\r\n//       .catch((err) => {\r\n//         alert(err.message);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <section className={classes.auth}>\r\n//       <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n//       <form onSubmit={submitHandler}>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor=\"email\">Your Email</label>\r\n//           <input type=\"email\" id=\"email\" required ref={emailInputRef} />\r\n//         </div>\r\n//         <div className={classes.control}>\r\n//           <label htmlFor=\"password\">Your Password</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             required\r\n//             ref={passwordInputRef}\r\n//           />\r\n//         </div>\r\n\r\n//         <div className={classes.actions}>\r\n//           {!isLoading && (\r\n//             <button>{isLogin ? \"Login\" : \"Create An Account\"}</button>\r\n//           )}\r\n//           {isLoading && <p>sending request...</p>}\r\n//           <button\r\n//             type=\"button\"\r\n//             className={classes.toggle}\r\n//             onClick={switchAuthModeHandler}\r\n//           >\r\n//             {isLogin ? \"Create new account\" : \"Login with existing account\"}\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\n// export default AuthForm;\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}