{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\swapn\\\\Desktop\\\\ReactCloneProjects\\\\gmail_clone\\\\src\\\\LeftRight\\\\EmailList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import EmailListSettings from \"./EmailListSettings\";\n// import EmailType from \"./EmailTyps\";\n// import EmailBody from \"./EmailBody\";\n\n// const EmailList = () => {\n//   const [emailList, setEmailList] = useState([]);\n\n//   useEffect(() => {\n//     const getEmails = () => {\n//       fetch(\"https://clone-reactjssss-default-rtdb.firebaseio.com/mail.json\")\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//           }\n//           return response.json();\n//         })\n//         .then((data) => {\n//           setEmailList(data);\n//         })\n//         .catch((error) => {\n//           console.error(error);\n//         });\n//     };\n\n//     getEmails();\n//   }, []);\n//   return (\n//     <div className=\"emaillist\">\n//       <EmailListSettings></EmailListSettings>\n//       <EmailType></EmailType>\n\n//       {emailList.map(({ id, data }) => {\n//         return (\n//           <EmailBody\n//             name={data.to}\n//             subject={data.subject}\n//             message={data.message}\n//           />\n//         );\n//       })}\n//     </div>\n//   );\n// };\n\n// export default EmailList;\n\nimport React, { useState, useEffect } from \"react\";\nimport EmailListSettings from \"./EmailListSettings\";\nimport EmailType from \"./EmailTyps\";\nimport EmailBody from \"./EmailBody\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailList = () => {\n  _s();\n  const [emailList, setEmailList] = useState([]);\n  useEffect(() => {\n    const getEmails = () => {\n      fetch(\"https://clone-reactjssss-default-rtdb.firebaseio.com/mail.json\").then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      }).then(data => {\n        // Convert the Firebase data object into an array\n        const emailArray = Object.entries(data).map(([id, emailData]) => ({\n          id,\n          data: emailData\n        }));\n\n        // Sort the emailArray by timestamp in descending order\n        emailArray.sort((a, b) => b.data.timestamp + a.data.timestamp);\n        setEmailList(emailArray);\n      }).catch(error => {\n        console.error(error);\n      });\n    };\n    getEmails();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"emaillist\",\n    children: [/*#__PURE__*/_jsxDEV(EmailListSettings, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmailType, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), emailList.map(({\n      id,\n      data\n    }) => {\n      // Get the current time\n      const currentTime = new Date().toLocaleTimeString();\n      return /*#__PURE__*/_jsxDEV(EmailBody, {\n        name: data.from ///\n        ,\n        email: data.email,\n        subject: data.subject,\n        message: data.message,\n        time: `${currentTime} (Received: ${new Date(data.timestamp).toLocaleTimeString()})`\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(EmailList, \"gyVcR1Ebw2uUOcslAonZhhmUIcc=\");\n_c = EmailList;\nexport default EmailList;\nvar _c;\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useState","useEffect","EmailListSettings","EmailType","EmailBody","jsxDEV","_jsxDEV","EmailList","_s","emailList","setEmailList","getEmails","fetch","then","response","ok","Error","json","data","emailArray","Object","entries","map","id","emailData","sort","a","b","timestamp","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentTime","Date","toLocaleTimeString","name","from","email","subject","message","time","_c","$RefreshReg$"],"sources":["C:/Users/swapn/Desktop/ReactCloneProjects/gmail_clone/src/LeftRight/EmailList.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import EmailListSettings from \"./EmailListSettings\";\r\n// import EmailType from \"./EmailTyps\";\r\n// import EmailBody from \"./EmailBody\";\r\n\r\n// const EmailList = () => {\r\n//   const [emailList, setEmailList] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const getEmails = () => {\r\n//       fetch(\"https://clone-reactjssss-default-rtdb.firebaseio.com/mail.json\")\r\n//         .then((response) => {\r\n//           if (!response.ok) {\r\n//             throw new Error(\"Network response was not ok\");\r\n//           }\r\n//           return response.json();\r\n//         })\r\n//         .then((data) => {\r\n//           setEmailList(data);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(error);\r\n//         });\r\n//     };\r\n\r\n//     getEmails();\r\n//   }, []);\r\n//   return (\r\n//     <div className=\"emaillist\">\r\n//       <EmailListSettings></EmailListSettings>\r\n//       <EmailType></EmailType>\r\n\r\n//       {emailList.map(({ id, data }) => {\r\n//         return (\r\n//           <EmailBody\r\n//             name={data.to}\r\n//             subject={data.subject}\r\n//             message={data.message}\r\n//           />\r\n//         );\r\n//       })}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EmailList;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport EmailListSettings from \"./EmailListSettings\";\r\nimport EmailType from \"./EmailTyps\";\r\nimport EmailBody from \"./EmailBody\";\r\n\r\nconst EmailList = () => {\r\n  const [emailList, setEmailList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getEmails = () => {\r\n      fetch(\"https://clone-reactjssss-default-rtdb.firebaseio.com/mail.json\")\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          // Convert the Firebase data object into an array\r\n          const emailArray = Object.entries(data).map(([id, emailData]) => ({\r\n            id,\r\n            data: emailData,\r\n          }));\r\n\r\n          // Sort the emailArray by timestamp in descending order\r\n          emailArray.sort((a, b) => b.data.timestamp + a.data.timestamp);\r\n\r\n          setEmailList(emailArray);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    };\r\n\r\n    getEmails();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"emaillist\">\r\n      <EmailListSettings></EmailListSettings>\r\n      <EmailType></EmailType>\r\n\r\n      {emailList.map(({ id, data }) => {\r\n        // Get the current time\r\n        const currentTime = new Date().toLocaleTimeString();\r\n\r\n        return (\r\n          <EmailBody\r\n            key={id}\r\n            name={data.from} ///\r\n            email={data.email}\r\n            subject={data.subject}\r\n            message={data.message}\r\n            time={`${currentTime} (Received: ${new Date(\r\n              data.timestamp\r\n            ).toLocaleTimeString()})`}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}